#!/usr/bin/env bash

set -o nounset
set -o errexit

BACKPORTS_PACKAGES="wifi" # wwan nfc ieee802154 media


# Check for already installed backports drivers
function check_drivers() {
	echo "Checking for installed backports drivers ..."
	KERNEL_BASE=$(echo $(uname -r) | sed -n "s/\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p")
	for DIR in $(ls -1d /lib/modules/${KERNEL_BASE}* || true); do
		UPDATE_DRIVERS=$(find ${DIR}/updates/drivers -name *.ko 2> /dev/null || true)
		for DRIVER in ${UPDATE_DRIVERS}; do
			DRIVER_MODINFO=$(modinfo -F version "${DRIVER}" 2>&1 | grep -i "using backports v" || true)
			if [ "${DRIVER_MODINFO}" != "" ]; then
				# Check for "exec format error"
				DRIVER_NAME=$(basename "${DRIVER}" .ko)
				DRIVER_LOADED=$(lsmod | grep "^${DRIVER_NAME}  " || true)
				if [ "${DRIVER_LOADED}" == "" ]; then
					DRIVER_EXECFORMAT=$(sudo modprobe "${DRIVER_NAME}" 2>&1 | grep -i "exec format error" || true)
					if [ "${DRIVER_EXECFORMAT}" != "" ]; then
						echo "   ${DRIVER_NAME} - exec format error"
						echo "      Drivers have been compiled for a different kernel, try running Liam McLoughlin's rpi-update tool and reboot"
						continue
					fi
					DRIVER_LOADED=$(lsmod | grep "^${DRIVER_NAME}  " || true)
					if [ "${DRIVER_LOADED}" == "" ]; then
						echo "   ${DRIVER_NAME} - failed to modprobe"
						continue
					fi
					sudo modprobe --remove "${DRIVER_NAME}" > /dev/null
				fi
				
				DRIVER_FOLDER=$(echo "${DRIVER}" | sed -n "s/\(.\+\/drivers\/\).*/\1/p")
				echo "   Found: ${DRIVER_FOLDER}"
				echo ""
				return 0
			fi
		done
	done
	echo "   Did not find any valid drivers"
	echo ""
	return 1
}


# Check for linux-headers
if [ ! -e "/lib/modules/$(uname -r)/build" ]; then
	echo "ERROR: Linux kernel headers are not installed"
	echo ""
	exit 1
fi


# Gracefully quit if valid drivers found
check_drivers && exit 0


# Download the latest stable (non-RC) version
cd /usr/src
sudo rm -rf backports*/ > /dev/null
sudo rm -f backports* > /dev/null
echo "Finding latest stable version ..."
BACKPORT_VER=$(wget https://www.kernel.org/pub/linux/kernel/projects/backports/stable/ -qq -O - | sed -n "s/.*href=\"\([^\"\/]\+\).*/\1/p" | egrep "v[0-9]+\.[0-9]+" | grep -vi rc | sort -V | tail -1)
echo "   ${BACKPORT_VER}"
BACKPORT_FILE=$(wget https://www.kernel.org/pub/linux/kernel/projects/backports/stable/${BACKPORT_VER}/ -qq -O - | sed -n "s/.*href=\"\([^\"\/]\+\).*/\1/p" | egrep "\.tar\.(bz2|gz|xz)" | sort -V | tail -1)
BACKPORT_URL="https://www.kernel.org/pub/linux/kernel/projects/backports/stable/${BACKPORT_VER}/${BACKPORT_FILE}"
echo "Downloading ${BACKPORT_FILE} ..."
sudo wget -q -O "${BACKPORT_FILE}" "${BACKPORT_URL}" > /dev/null
if [ ! -e "${BACKPORT_FILE}" ]; then
	echo "   Download failed"
	echo ""
	exit 1
fi

# Extract archive
echo "Extracting ${BACKPORT_FILE} ..."
sudo tar xf "${BACKPORT_FILE}" > /dev/null
sudo rm -f "${BACKPORT_FILE}" > /dev/null
if [ ! -e "${BACKPORT_FILE%.tar.*}/Makefile" ]; then
	echo "   Extract failed"
	echo ""
	exit 1
fi

echo ""


# Make sure modules.* files exist
sudo touch "/lib/modules/$(uname -r)/modules.order" > /dev/null
sudo touch "/lib/modules/$(uname -r)/modules.builtin" > /dev/null
sudo depmod -a > /dev/null

# Build backports
cd "${BACKPORT_FILE%.tar.*}"
echo "Running make uninstall ..."
sudo make uninstall > /dev/null
echo "Running make mrproper ..."
sudo make mrproper > /dev/null
echo ""
for PACKAGE in ${BACKPORTS_PACKAGES}; do
	echo "Building ${PACKAGE} ..."
	sudo make defconfig-${PACKAGE} > /dev/null
	sudo make > /dev/null
	sudo make install > /dev/null
done
echo ""

# Quit with error if no valid drivers found
check_drivers || exit 1
